{"version":3,"file":"static/js/520.fb1d6f70.chunk.js","mappings":"sSAEMA,E,MAAgBC,GAAAA,OAAa,CAC/BC,QAAS,gCACTC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASC,sCAKFC,EAAW,mCAAG,oGACAP,EAAcQ,IAAI,oBADlB,cACjBC,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,qDAKXC,EAAY,mCAAG,WAAMC,GAAN,uFACDZ,EAAcQ,IAAd,6BAAwCI,IADvC,cAClBH,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZG,EAAe,mCAAE,WAAMC,GAAN,uFACHd,EAAcQ,IAAd,gBAA2BM,IADxB,cACpBL,EADoB,yBAEnBA,EAASC,MAFU,2CAAF,sDAKfK,EAAe,mCAAE,WAAMD,GAAN,uFACHd,EAAcQ,IAAd,gBAA2BM,EAA3B,aADG,cACpBL,EADoB,yBAEnBA,EAASC,MAFU,2CAAF,sDAKfM,EAAe,mCAAE,WAAMF,GAAN,uFACHd,EAAcQ,IAAd,gBAA2BM,EAA3B,aADG,cACpBL,EADoB,yBAEnBA,EAASC,MAFU,2CAAF,qD,gFCpBfO,GATOC,EAAAA,GAAAA,IAAH,mHAKN,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAIgBH,EAAAA,GAAAA,IAAH,uQAYX,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,4ECrBFC,EAAS,WAEtB,OACA,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,YAErD,C,8ICZWC,EAAaZ,EAAAA,GAAAA,KAAH,yNAIZ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAIE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IASFU,EAAmBb,EAAAA,GAAAA,OAAH,sSAEhB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACA,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAQS,SAAAF,GAAC,OAAIA,EAAEC,MAAMS,OAAOG,QAAnB,IAOZC,EAAwBf,EAAAA,GAAAA,KAAH,iLAYrBgB,EAAkBhB,EAAAA,GAAAA,MAAH,uYAMb,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAUe,SAAAF,GAAC,OAAIA,EAAEC,MAAMS,OAAOM,GAAnB,I,2BC5DnBC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAExB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAoBA,OACI,UAACV,EAAD,CAAYW,UAAU,aAAaJ,SAflB,SAAAK,GACjBA,EAAEC,iBAEmB,KAAjBJ,EAAMK,QAIVP,EAASE,GACTC,EAAS,IAETE,EAAEG,OAAOC,SANNC,IAAAA,OAAAA,QAAwB,0BAO9B,EAIG,WAEI,SAAChB,EAAD,CAAkBiB,KAAK,SAASP,UAAU,oBAA1C,UACK,SAACR,EAAD,CAAuBQ,UAAU,0BAAjC,uBAEL,SAACP,EAAD,CACIe,KAAK,cACLR,UAAU,mBACVO,KAAK,OACLE,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SA/BK,SAAAX,GACbF,EAASE,EAAEY,cAAc1C,MAAM2C,cAC9B,MAgCP,E,+DCqBF,EAvDe,WAAO,IAAD,EAEnB,GAA4BjB,EAAAA,EAAAA,UAAS,IAArC,eAAOkB,EAAP,KAAeC,EAAf,KACA,GAAkCnB,EAAAA,EAAAA,UAAS,SAA3C,eAAOoB,EAAP,KAAkBC,EAAlB,KACA,GAA0BrB,EAAAA,EAAAA,UAAS,MAAnC,eAAOsB,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MAEb3B,EAAK,UAAGwB,EAAavD,IAAI,gBAApB,QAAgC,IAEzC2D,EAAAA,EAAAA,YAAW,WAAM,wCAEf,iFACO5B,EADP,wDAKEoB,EAAa,QALf,mBAOQhD,EAAAA,EAAAA,IAAa4B,GAAO6B,MAAK,SAAAC,GAC3B,GAA+B,IAA3BA,EAASC,cACX,OAAOC,QAAQC,OAAO,IAAIC,MAAJ,+BAAkClC,EAAlC,OAEtBkB,GAAU,SAAAtC,GAAC,OAAOkD,EAASK,OAAhB,IACXf,EAAa,QAEhB,IAdL,uDAeME,EAAS,EAAD,IAfd,0DAFe,uBAAC,WAAD,wBAqBfc,EACD,GAAE,CAACpC,IAMF,OACI,iCACA,SAACH,EAAD,CAAWC,SANA,SAACE,GAChByB,EAA0B,KAAVzB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAC7C,KAKK,SAAC,KAAD,UACKiB,EAAOoB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAI7B,EAAd,EAAcA,KAAM8B,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,QAAjC,OACZ,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMlB,GAAlC,WACE,SAAC,KAAD,iBAAaY,QAAb,IAAaA,EAAAA,EAAO5B,KACpB,SAAC,KAAD,CAAKmC,IAAOL,EAAF,yCAA2DA,GAA1CM,EAAyDC,IAAKN,EAASvD,MAAM,YAH7FqD,EADH,MAQA,SAAdpB,IAAyB,SAACpC,EAAA,EAAD,IACf,OAAVsC,IAAmB,SAAC,IAAD,UAAeA,EAAM2B,YAEhD,C,uLC5DWC,EAAmBtE,EAAAA,GAAAA,GAAH,8IAOlB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAKCoE,EAAWvE,EAAAA,GAAAA,GAAH,6PAMRwE,EAAQxE,EAAAA,GAAAA,GAAH,mOAGH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAOH,SAAAF,GAAC,OAAIA,EAAEC,MAAMS,OAAO8D,IAAnB,IAKDC,EAAa1E,EAAAA,GAAAA,GAAH,uPAIT,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAWF,SAAAF,GAAC,OAAIA,EAAEC,MAAMS,OAAOgE,KAAnB,IACiB,SAAA1E,GAAC,OAAIA,EAAEC,MAAMS,OAAOiE,KAAnB,IAKnBC,EAAM7E,EAAAA,GAAAA,IAAH,oD","sources":["components/API/API.js","components/App.styled.jsx","components/Loader/Loader.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","pages/Movies/Movies.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: process.env.REACT_APP_MOVIE_API_KEY,\n    },\n  });\n\n\nexport const getTrending = async () => {\n    const response = await axiosInstance.get('trending/all/day');\n    return response.data;\n};\n\nexport const searchMovies = async value => {\n    const response = await axiosInstance.get(`search/movie?query=${value}`);\n    return response.data;\n};\n\nexport const getMovieDetails= async movieId => {\n    const response = await axiosInstance.get(`movie/${movieId}`);\n    return response.data;\n};\n\nexport const getMovieCredits= async movieId => {\n    const response = await axiosInstance.get(`movie/${movieId}/credits`);\n    return response.data;\n};\n\nexport const getMovieReviews= async movieId => {\n    const response = await axiosInstance.get(`movie/${movieId}/reviews`);\n    return response.data;\n};\n","import styled from 'styled-components';\n\nexport const Wrap = styled.div`\n\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: ${p => p.theme.space[4]}px;\n`;\n\n\nexport const ErrorMessage = styled.div`\n    font-family: inherit;\n    font-size: 18px;\n    line-height: 24px;\n    font-style: normal;\n    font-weight: 500;\n\n    text-shadow: 1px 1px 2px red, 0 0 1em blue, 0 0 0.2em blue;\n\n\n\n    text-align: center;\n    margin: ${p => p.theme.space[4]}px;\n`;\n","import { ColorRing } from 'react-loader-spinner';\n\nexport const Loader = () => {\n\nreturn (\n<ColorRing\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"blocks-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"blocks-wrapper\"\n  colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n/>\n)}\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: ${p => p.theme.space[3]}px;\n\n\n\n    margin: ${p => p.theme.space[4]}px;\n\n    font-size: 16px;\n\n    font-style: normal;\n    font-weight: 700;\n\n\n`;\nexport const SearchFormButton = styled.button`\n\n    width: ${p => p.theme.space[7]}px;\n    height: ${p => p.theme.space[5]}px;\n\n\n\n    border-radius: 8px;\nborder: none;\ncursor: pointer;\n\n    background-color: ${p => p.theme.colors.lightred};\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n\n\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n\n    font-size: 18px;\n    line-height: 24px;\n    font-style: normal;\n    font-weight: 500;\n\n    text-decoration: none;\n    text-align: center;\n\n`;\n\nexport const SearchFormInput = styled.input`\n\n    font-size: 18px;\n    line-height: 24px;\n    font-style: normal;\n    font-weight: 500;\n    padding: ${p => p.theme.space[2]}px;\n\n\n    text-decoration: none;\n\n    border-radius: 8px;\n    border: none;\n\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n    :enabled {outline-color: ${p => p.theme.colors.red};};\n\n`;","import { useState } from 'react';\nimport { SearchFormInput, SearchFormButtonLabel, SearchFormButton, SearchForm } from './SearchForm.styled';\nimport Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\n\nexport const Searchbar = ({ onSubmit }) => {\n\n    const [query, setQuery] = useState('');\n\n    const onChange = e => {\n        setQuery(e.currentTarget.value.toLowerCase());\n        };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (query.trim() === '') {\n           Notiflix.Notify.failure('No search word entered!');\n            return;\n        }\n        onSubmit(query);\n        setQuery('');\n\n        e.target.reset();\n    };\n\n\n    return (\n        <SearchForm className=\"SearchForm\" onSubmit={handleSubmit}\n>\n            <SearchFormButton type=\"submit\" className=\"SearchForm-button\">\n                {<SearchFormButtonLabel className=\"SearchForm-button-label\">Search</SearchFormButtonLabel>}\n            </SearchFormButton>\n            <SearchFormInput\n                name=\"searchValue\"\n                className=\"SearchForm-input\"\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movies\"\n                onChange={onChange}\n            />\n        </SearchForm>\n)};\n\nSearchbar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport { Searchbar } from '../../components/SearchForm/SearchForm';\nimport { searchMovies } from '../../components/API/API';\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\"\nimport { MoviesListStyled, TitleMovie, ListItem, Img } from \"./Movies.styled\"\nimport { Loader } from '../../components/Loader/Loader';\nimport { ErrorMessage } from '../../components/App.styled';\nimport image from '../MovieDetails/else.jpg';\n\nconst Movies = () => {\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState('false');\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\nconst query = searchParams.get(\"query\") ?? '';\n\n  useEffect( () => {\n\n    async function getMoviesBySearch () {\n      if (!query) {\n        return;\n      }\n\n      setIsLoading('true');\n      try {\n      await searchMovies(query).then(responce => {\n          if (responce.total_results === 0) {\n            return Promise.reject(new Error(`No movies with word \"${query}\"`))\n          }\n            setMovies(p=>(p = responce.results));\n            setIsLoading('false');\n\n        })} catch(error) {\n          setError(error);\n      }\n    };\n    \n    getMoviesBySearch ();\n  }, [query]);\n\n  const onSubmit = (query) => {\n    setSearchParams(query !== \"\" ? { query } : {});\n  }\n\n    return (\n        <>\n        <Searchbar onSubmit={onSubmit} />\n        <MoviesListStyled>\n            {movies.map(({ title, id, name, poster_path, tagline }) => \n            <ListItem key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                <TitleMovie>{title??name}</TitleMovie>\n                <Img src={(!poster_path) ? image : `https://image.tmdb.org/t/p/w200${poster_path}`} alt={tagline} width=\"200\"/>\n              </Link>\n            </ListItem>)}\n        </MoviesListStyled>\n        {(isLoading === 'true') && <Loader/>}\n        {(error !== null) && <ErrorMessage>{error.message}</ErrorMessage>}\n        </>\n)};\n\nexport default Movies;\n","import styled from 'styled-components';\n\nexport const MoviesListStyled = styled.ul`\n\nposition: relative;\n\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: ${p => p.theme.space[4]}px;\n\n\n`;\n\nexport const ListItem = styled.li`\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n    border-radius: 8px;\n    :hover, :focus {transform: scale(1.01); transition: transform 150ms;}\n`;\n\nexport const Title = styled.h1`\n\n\n    padding: ${p => p.theme.space[4]}px;\n\n    font-style: normal;\n    font-weight: 700;\n\n    text-transform: uppercase;\n    text-align: center;\n    color: ${p => p.theme.colors.text};\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n\n`;\n\nexport const TitleMovie = styled.h2`\n\nposition: absolute;\n\n    margin: ${p => p.theme.space[1]}px;\nmax-width: 200px;\n\n\n\n    font-size: 12px;\n\n    font-style: normal;\n    font-weight: 700;\n\n    text-align: left;\n    color: ${p => p.theme.colors.white};\n    text-shadow: 2px 2px 2px ${p => p.theme.colors.black};\n\n\n`;\n\nexport const Img = styled.img`\n    border-radius: 8px;\n\n\n`;\n\n"],"names":["axiosInstance","axios","baseURL","headers","params","api_key","process","getTrending","get","response","data","searchMovies","value","getMovieDetails","movieId","getMovieCredits","getMovieReviews","ErrorMessage","styled","p","theme","space","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","SearchForm","SearchFormButton","lightred","SearchFormButtonLabel","SearchFormInput","red","Searchbar","onSubmit","useState","query","setQuery","className","e","preventDefault","trim","target","reset","Notiflix","type","name","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","then","responce","total_results","Promise","reject","Error","results","getMoviesBySearch","map","title","id","poster_path","tagline","to","state","from","src","image","alt","message","MoviesListStyled","ListItem","Title","text","TitleMovie","white","black","Img"],"sourceRoot":""}